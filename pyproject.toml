[project]
name = 'fast-pypi'
description = ''
authors = [{ name = 'hotdog-werx', email = 'james.trousdale@protonmail.com' }]
license = 'MIT'
readme = 'README.md'
requires-python = '>=3.10'
dynamic = ['version']

dependencies = [
  'pydantic >=2.11.4, <3',
  'fastapi >=0.115.12, <1',
  'python-multipart >=0.0.20, <1',
  'jinja2 >=3.1.6, <4',
  'orjson >=3.10.18, <4',
  'aiofiles >=24.1.0, <25',
  'aioshutil >=1.5.0, <2',
]

[project.optional-dependencies]
azure_blob = [
  'azure-storage-blob >=12.25.1, <13',
  'azure-identity >=1.23.0, <2',
  'aiohttp >=3.12.0, <4',
]

[dependency-groups]
dev = [
  'ruff >=0.11.13, <1',
  'basedpyright >= 1.29.2, <2',
  'coverage >=7.2.3',
  'greenlet >=3.1.1, <4',
  'pytest >= 8.3.3, <9',
  'pytest-mock >=3.12.0',
  'pytest-asyncio >=0.22.0, <1',
  'uvicorn >=0.34.2, <1',
  'types-aiofiles >=24.1.0.20250516, <25',
  'testcontainers[azurite] >=4.10.0, <5',
  'httpx >=0, <1',
]

[build-system]
requires = ['hatchling']
build-backend = 'hatchling.build'

[tool.hatch.version]
path = 'fast_pypi/version.py'

[tool.hatch.build.targets.sdist]
include = ['/README.md', '/CHANGELOG.md', 'fast_pypi']

[tool.hatch.build.targets.wheel]
packages = ['fast_pypi']

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = 'function'
addopts = '-vv'

[tool.coverage.report]
exclude_lines = [
  'pragma: no cover',
  'if __name__ == .__main__.:',
  'if TYPE_CHECKING:',
  '\\.\\.\\.',
]

[tool.ruff]
# Basic configuration
line-length = 119
target-version = 'py311'

[tool.ruff.lint]

# Rule selection and configuration
select = ['ALL']
ignore = [
  'COM812',  # Trailing comma, supposedly conflicts with linter, so we have add-trailing-commas
  'D100',    # No docstrings for modules
  'D104',    # No docstrings for packages
  'D107',    # Allow __init__ to not have docstrings, conflicts with pydoclint
  'FIX',     # Allow TODOs which are checked by TD rules
  'ISC001',  # Allow implicit string concatenation. Sometimes it's just cleaner
  'PLR2004', # Allow magic value comparison
  'SLF',     # Ignore private member access, covered by pyright
]

# Per-rule configuration
[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = 'single'
multiline-quotes = 'double'

[tool.ruff.lint.isort]
split-on-trailing-comma = true
known-first-party = ['fast_pypi']

[tool.ruff.lint.mccabe]
max-complexity = 7

[tool.ruff.lint.per-file-ignores]
'tests/**/*.py' = [
  'ANN201', # Allow tests to not have a return type
  'ARG001', # Ignore unused arguments in tests - sometimes required for fixtures
  'D101',   # Allow test code to have public classes without docstrings
  'D102',   # Allow test code to have public methods without docstrings
  'D103',   # Allow test code to have public functions without docstrings
  'S101',   # Please sir may I use assert in my tests
]

[tool.ruff.lint.pydocstyle]
convention = 'google'

# Formatting options
[tool.ruff.format]
quote-style = 'single'
indent-style = 'space'
skip-magic-trailing-comma = false

[tool.basedpyright]
include = ["fast_pypi", "tests"]

executionEnvironments = [
  { root = "tests", reportAny = "none" },
  { root = "fast_pypi" },
]
